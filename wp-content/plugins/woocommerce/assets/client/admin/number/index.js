!function(){"use strict";var e={12267:function(e){e.exports=function(e,n,r,t){e=(e+"").replace(/[^0-9+\-Ee.]/g,"");var i=isFinite(+e)?+e:0,u=isFinite(+n)?Math.abs(n):0,o=void 0===t?",":t,a=void 0===r?".":r,l="";return l=(u?function(e,n){if(-1===(""+e).indexOf("e"))return+(Math.round(e+"e+"+n)+"e-"+n);var r=(""+e).split("e"),t="";return+r[1]+n>0&&(t="+"),(+(Math.round(+r[0]+"e"+t+(+r[1]+n))+"e-"+n)).toFixed(n)}(i,u).toString():""+Math.round(i)).split("."),l[0].length>3&&(l[0]=l[0].replace(/\B(?=(?:\d{3})+(?!\d))/g,o)),(l[1]||"").length<u&&(l[1]=l[1]||"",l[1]+=new Array(u-l[1].length+1).join("0")),l.join(a)}}},n={};function r(t){var i=n[t];if(void 0!==i)return i.exports;var u=n[t]={exports:{}};return e[t](u,u.exports,r),u.exports}r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,{a:n}),n},r.d=function(e,n){for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};!function(){r.r(t),r.d(t,{calculateDelta:function(){return o},formatValue:function(){return u},numberFormat:function(){return i},parseNumber:function(){return a}});var e=r(12267),n=r.n(e);function i(e,r){let{precision:t=null,decimalSeparator:i=".",thousandSeparator:u=","}=e;if(void 0===r)return"";if("number"!=typeof r&&(r=parseFloat(r)),isNaN(r))return"";let o=null===t?NaN:Number(t);if(isNaN(o)){const[,e]=r.toString().split(".");o=e?e.length:0}return n()(r,o,i,u)}function u(e,n,r){if(!Number.isFinite(r))return null;switch(n){case"average":return Math.round(r);case"number":return i({...e,precision:null},r)}return null}function o(e,n){return Number.isFinite(e)&&Number.isFinite(n)?0===n?0:Math.round((e-n)/n*100):null}function a(e,n){let{precision:r=null,decimalSeparator:t=".",thousandSeparator:i=","}=e;if("string"!=typeof n||""===n)return"";let u=null===r?NaN:Number(r);if(isNaN(u)){const[,e]=n.split(t);u=e?e.length:0}return Number.parseFloat(n.replace(new RegExp(`\\${i}`,"g"),"").replace(new RegExp(`\\${t}`,"g"),".")).toFixed(u)}}(),(window.wc=window.wc||{}).number=t}();