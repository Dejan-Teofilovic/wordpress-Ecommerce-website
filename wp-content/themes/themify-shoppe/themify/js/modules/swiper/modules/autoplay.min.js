(function(a) {
    'use strict';
    const b = a.Utils,
        c = {
            run() {
                const a = this,
                    c = a.slides.eq(a.activeIndex),
                    d = c.attr("data-swiper-autoplay") ? c.attr("data-swiper-autoplay") : a.params.autoplay.delay;
                clearTimeout(a.autoplay.timeout), a.autoplay.timeout = b.nextTick(function() {
                    a.params.autoplay.reverseDirection ? a.params.loop ? (a.loopFix(), a.slidePrev(a.params.speed, !0, !0), a.emit("autoplay")) : a.isBeginning ? a.params.autoplay.stopOnLastSlide ? a.autoplay.stop() : (a.slideTo(a.slides.length - 1, a.params.speed, !0, !0), a.emit("autoplay")) : (a.slidePrev(a.params.speed, !0, !0), a.emit("autoplay")) : a.params.loop ? (a.loopFix(), a.slideNext(a.params.speed, !0, !0), a.emit("autoplay")) : a.isEnd ? a.params.autoplay.stopOnLastSlide ? a.autoplay.stop() : (a.slideTo(0, a.params.speed, !0, !0), a.emit("autoplay")) : (a.slideNext(a.params.speed, !0, !0), a.emit("autoplay")), a.params.cssMode && a.autoplay.running && a.autoplay.run()
                }, d)
            },
            start() {
                return !(this.autoplay.running || "undefined" != typeof this.autoplay.timeout) && (this.autoplay.running = !0, this.emit("autoplayStart"), this.autoplay.run(), !0)
            },
            stop() {
                return !!(this.autoplay.running && "undefined" != typeof this.autoplay.timeout) && (this.autoplay.timeout && (clearTimeout(this.autoplay.timeout), this.autoplay.timeout = void 0), this.autoplay.running = !1, this.emit("autoplayStop"), !0)
            },
            pause(a) {
                !this.autoplay.running || this.autoplay.paused || (this.autoplay.timeout && clearTimeout(this.autoplay.timeout), this.autoplay.paused = !0, 0 !== a && this.params.autoplay.waitForTransition ? this.$wrapperEl[0].addEventListener("transitionend", this.autoplay.onTransitionEnd) : (this.autoplay.paused = !1, this.autoplay.run()))
            }
        },
        d = {
            name: "autoplay",
            params: {
                autoplay: {
                    enabled: !1,
                    delay: 3e3,
                    waitForTransition: !0,
                    disableOnInteraction: !0,
                    stopOnLastSlide: !1,
                    reverseDirection: !1
                }
            },
            create: function() {
                const a = this;
                b.extend(a, {
                    autoplay: {
                        running: !1,
                        paused: !1,
                        run: c.run.bind(a),
                        start: c.start.bind(a),
                        stop: c.stop.bind(a),
                        pause: c.pause.bind(a),
                        onVisibilityChange() {
                            a.autoplay.running && "hidden" === document.visibilityState && a.autoplay.pause(), a.autoplay.paused && "visible" === document.visibilityState && (a.autoplay.run(), a.autoplay.paused = !1)
                        },
                        onTransitionEnd(b) {
                            a && !a.destroyed && a.$wrapperEl && b.target === this && (a.$wrapperEl[0].removeEventListener("transitionend", a.autoplay.onTransitionEnd), a.autoplay.paused = !1, a.autoplay.running ? a.autoplay.run() : a.autoplay.stop())
                        }
                    }
                })
            },
            on: {
                init() {
                    this.params.autoplay.enabled && (this.autoplay.start(), document.addEventListener("visibilitychange", this.autoplay.onVisibilityChange))
                },
                beforeTransitionStart(a, b) {
                    this.autoplay.running && (b || !this.params.autoplay.disableOnInteraction ? this.autoplay.pause(a) : this.autoplay.stop())
                },
                sliderFirstMove() {
                    this.autoplay.running && (this.params.autoplay.disableOnInteraction ? this.autoplay.stop() : this.autoplay.pause())
                },
                touchEnd() {
                    this.params.cssMode && this.autoplay.paused && !this.params.autoplay.disableOnInteraction && this.autoplay.run()
                },
                destroy() {
                    this.autoplay.running && this.autoplay.stop(), document.removeEventListener("visibilitychange", this.autoplay.onVisibilityChange)
                }
            }
        };
    a.use(d)
})(TF_Swiper);